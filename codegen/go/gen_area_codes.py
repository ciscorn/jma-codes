import json
import sys

from pydantic import BaseModel, parse_file_as

_HEADER = """// Code generated by gen_area_codes.py. DO NOT EDIT.

package jmacodes

type AreaCodeProps struct {
\tLevel string // 区域の種類 ("fuken", "ichiji", "matome", "city", "saibun", "other")
\tName string // 区域名
\tKana string // ふりがな
\tFuken string // 属する 府県予報区 のコード
\tIchiji string // 属する 一次細分区域 のコード
\tMatome string // 属する 市町村等をまとめた地域 のコード
\tSeisSaibun string // 属する 地震情報／細分区域 のコード
\tCentroid [2]float32 // 領域の重心 (WGS84空間上)
\tArea float32 // 領域の面積 (WGS84空間上)
\tBBox [4]float32 // 領域のバウンディングボックス (WGS84空間上)
}
"""

# 一部の「市町村等をまとめた地域」の予報区名を恣意的に変更します (例: "460041": "北部" -> "奄美地方北部")
# 例えば、奄美地方北部 を (鹿児島県) 北部 のように表示した場合に、重大な誤解を招くためです。
ALTERNATIVE_NAMES = {
    "460041": "奄美地方北部",  # 鹿児島県
    "460042": "奄美地方南部",  # 鹿児島県
    "471011": "本島南部",  # 沖縄県
    "471012": "本島中部",  # 沖縄県
}


class ShapeProperties(BaseModel):
    code: str
    name: str
    area: float
    centroid: tuple[float, float]
    bbox: tuple[float, float, float, float]


def process() -> None:
    with open("./json/forecast_area_tree.json", encoding="utf-8") as src_f:
        data = json.load(src_f)

    with open("./json/PointSeismicIntensity.json", encoding="utf-8") as src_f:
        seis_data = json.load(src_f)["cityToSaibun"]

    shapes = []
    shapes.extend(
        parse_file_as(list[ShapeProperties], "./datasrc/shape_properties/city.json")
    )
    shapes.extend(
        parse_file_as(list[ShapeProperties], "./datasrc/shape_properties/matome.json")
    )
    shapes.extend(
        parse_file_as(list[ShapeProperties], "./datasrc/shape_properties/fuken.json")
    )
    shapes.extend(
        parse_file_as(list[ShapeProperties], "./datasrc/shape_properties/ichiji.json")
    )

    shape_map = {shape.code: shape for shape in shapes}

    items = data["items"]
    sorted_codes = sorted(items.keys())

    f = sys.stdout
    f.write(_HEADER)
    f.write("var AreaCodePropsMap = map[string]AreaCodeProps {\n")
    for code in sorted_codes:
        info = items[code]
        f.write(f'"{code}": {{')
        f.write(f'Level: "{info["level"]}", ')

        if code in ALTERNATIVE_NAMES:
            name = ALTERNATIVE_NAMES[code]
        else:
            name = info["name"]
        f.write(f'Name: "{name}", ')
        f.write(f'Kana: "{info["kana"]}", ')

        if "fuken" in info:
            f.write(f'Fuken: "{info["fuken"]}", ')
        if "ichiji" in info:
            f.write(f'Ichiji: "{info["ichiji"]}", ')
        if "matome" in info:
            f.write(f'Matome: "{info["matome"]}", ')

        if seis_entry := seis_data.get(code):
            f.write(f'SeisSaibun: "{seis_entry["seisSaibunCode"]}", ')

        # シェイプ情報を付与
        shape = shape_map.get(code)
        if shape is None:
            if info["level"] not in ["other", "saibun"]:
                print(f"[WARNING] No shape info for {name} ({code})", file=sys.stderr)
        else:
            centroid = ", ".join(f"{x:.4f}" for x in shape.centroid)
            f.write(f"Centroid: [2]float32{{{centroid}}}, ")
            f.write(f"Area: {shape.area:.4f}, ")
            bbox = ", ".join(f"{x:.4f}" for x in shape.bbox)
            f.write(f"BBox: [4]float32{{{bbox}}}, ")

        f.write("},\n")
    f.write("}\n")


if __name__ == "__main__":
    process()
